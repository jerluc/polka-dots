snippet_support = true
verbosity = 2

[[semantic_tokens]]
token = "comment"
face = "documentation"
modifiers = ["documentation"]

[[semantic_tokens]]
token = "comment"
face = "comment"

[[semantic_tokens]]
token = "function"
face = "function"

[[semantic_tokens]]
token = "keyword"
face = "keyword"

[[semantic_tokens]]
token = "namespace"
face = "module"

[[semantic_tokens]]
token = "operator"
face = "operator"

[[semantic_tokens]]
token = "string"
face = "string"

[[semantic_tokens]]
token = "type"
face = "type"

[[semantic_tokens]]
token = "variable"
face = "default+d"
modifiers = ["readonly"]

[[semantic_tokens]]
token = "variable"
face = "default+d"
modifiers = ["constant"]

[[semantic_tokens]]
token = "variable"
face = "variable"

[server]
# exit session if no requests were received during given period in seconds
# # works only in unix sockets mode (-s/--session)
# # set to 0 to disable
timeout = 1800 # seconds = 30 minutes

[language.rust]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "rust-analyzer"
settings_section = "rust-analyzer"

[language.rust.settings.rust-analyzer]
# Proc Macro support is important for Bevy projects
procMacro.enable = true
# disable hover actions, can be laggy on complex projects like Bevy
hoverActions.enable = false
# use the data generated by `cargo check`; disable if it is too slow for you
cargo.loadOutDirsFromCheck = true

[language.crystal]
filetypes = ["crystal"]
roots = ["shard.yml"]
command = "scry"

# [language.ruby]
# filetypes = ["ruby"]
# roots = ["Gemfile"]
# command = "solargraph"
# args = ["stdio"]

[language.graphql]
filetypes = ["graphql"]
roots = [".git"]
command = "graphql-lsp"
args = ["server", "-m", "stream"]

[language.javascript]
filetypes = ["javascript"]
roots = ["package.json"]
command = "typescript-language-server"
args = ["--stdio"]

[language.typescript]
filetypes = ["typescript"]
roots = ["package.json", "deno.json"]
command = "typescript-language-server"
args = ["--stdio"]

# command = "deno"
# args = ["lsp", "-q"]
# [language.typescript.settings.deno]
# enable = true
# lint = true

[language.jsonnet]
filetypes = ["jsonnet", "libsonnet"]
roots = ["jsonnetfile.json"]
command = "jsonnet-language-server"

[language.json]
filetypes = ["json"]
roots = ["package.json"]
command = "json-languageserver"
args = ["--stdio"]

[language.css]
filetypes = ["css"]
roots = ["package.json"]
command = "css-languageserver"
args = ["--stdio"]

[language.html]
filetypes = ["html"]
roots = ["package.json"]
command = "vscode-html-language-server"
args = ["--stdio"]

[language.ocaml]
filetypes = ["ocaml"]
roots = ["Makefile", "opam", "*.opam"]
command = "ocaml-language-server"
args = ["--stdio"]

[language.reason]
filetypes = ["reason"]
roots = ["package.json", "Makefile", ".git", ".hg"]
command = "ocaml-language-server"
args = ["--stdio"]

[language.python]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git", ".hg", "pyproject.toml"]
command = "pylsp"
# settings_section = "_"

[language.python.settings._]
# See https://github.com/python-lsp/python-lsp-server#configuration
# # pylsp.configurationSources = ["flake8"]

[language.c_cpp]
filetypes = ["c", "cpp"]
roots = ["compile_commands.json", ".cquery"]
command = "clangd"
# args = ["--init={\"cacheDirectory\":\"/tmp/cquery\",\"highlight\":{\"enabled\":true}}"]

[language.haskell]
filetypes = ["haskell"]
roots = ["Setup.hs", "stack.yaml", "*.cabal"]
command = "hie"
args = ["--lsp"]

[language.go]
filetypes = ["go"]
roots = ["Gopkg.toml", "go.mod", ".git", ".hg"]
command = "gopls"
offset_encoding = "utf-8"

[language.bash]
filetypes = ["sh"]
roots = [".git", ".hg"]
command = "bash-language-server"
args = ["start"]

[language.dart]
filetypes = ["dart"]
roots = ["pubspec.yaml", ".git"]
command = "dart_language_server"

[language.d]
filetypes = ["d", "di"]
roots = [".git", "dub.sdl", "dub.json"]
command = "dls"

[language.vue]
filetypes = ["vue", "vuejs"]
roots = ["package.json"]
command = "vue-language-server"
args = ["--stdio"]
settings_section = "vue"
[language.vue.settings.vue]
settings_section = "typescript"
[language.vue.settings.vue.typescript]
tsdk = "node_modules/typescript/lib"


[language.yaml]
filetypes = ["yaml"]
roots = [".git"]
command = "yaml-language-server"
args = ["--stdio"]
